version: '3.8' # specify docker-compose version

services: # services to run
  user-service: # Authenticating user
    build: 
      context: ./microservices/user-service/backend
    container_name: user-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=cesieats
    depends_on:
      - mysql
    networks:
      - app-network

  client-service:
    build: 
      context: ./microservices/client-service/backend
    container_name: client-service
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/client-service
    depends_on:
      - mongo
    networks:
      - app-network

  delivery-service:
    build: 
      context: ./microservices/delivery-service/backend
    container_name: delivery-service
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/delivery-service
    depends_on:
      - mongo
    networks:
      - app-network

  restaurant-service:
    build: 
      context: ./microservices/restaurant-service/backend
    container_name: restaurant-service
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/restaurant-service
    depends_on:
      - mongo
    networks:
      - app-network

  commercial-service:
    build: 
      context: ./microservices/commercial-service/backend
    container_name: commercial-service
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/commercial-service
    depends_on:
      - mongo
    networks:
      - app-network

  technical-service:
    build: 
      context: ./microservices/technical-service/backend
    container_name: technical-service
    ports:
      - "3006:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/technical-service
    depends_on:
      - mongo
    networks:
      - app-network

  sales-service:
    build: 
      context: ./microservices/sales-service/backend
    container_name: sales-service
    ports:
      - "3007:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/sales-service
    depends_on:
      - mongo
    networks:
      - app-network

  kong-database:
    image: postgres:9.6
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - app-network

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
    depends_on:
      - kong-database
    command: "kong migrations bootstrap"
    networks:
      - app-network

  api-gateway:
    image: kong:latest
    container_name: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    depends_on:
       - kong-database
       - kong-migrations
    networks:
      - app-network

  nginx:
    image: nginx:latest # specify the image to build the container from nginx 
    container_name: nginx # name of the container 
    ports:
      - "8080:8080" # specify port mapping
    # specify restart policy
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf # path to nginx configuration file 
    depends_on:
      - api-gateway
    networks:
      - app-network # specify network

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  mysql:
    image: mysql:latest
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "admin"
      MYSQL_DATABASE: "cesieats"
      MYSQL_USER: "admin"
      MYSQL_PASSWORD: "admin"
    networks:
      - app-network
    volumes:
      - mysql-data:/var/lib/mysql

volumes:
  mongo-data:
  postgres-data:
  mysql-data:

networks:
  app-network:
    driver: bridge
